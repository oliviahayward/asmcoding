# Calling Convention
# r0 is 0
# r1 is the return-address and result register
# r2 is the stack pointer
# r3 is the valstack
# r4, r5 are nonvolatiles
# r6, r7 are temps
.section init
    .zero r0
    .temps r6, r7
    jumptable:
        .space 256
    init_table:
        r5 := jumptable
        r4 := r5 + 256
        output "jt initialized\n"
        goto init_table_loop

    init_table_loop:
        output "init_table_loop\n"
        r5 := r5 + 1
        #if (r4 == r5) goto main using r0 ######## this is the segfault issue
        output "r4 == r5 passed\n"
        m[r0][r5] := input_error
        goto main
        goto init_table_loop

#################################################################
# number function
#################################################################
.section init 
    m[r0][jumptable + '0'] := number
    m[r0][jumptable + '1'] := number
    m[r0][jumptable + '2'] := number
    m[r0][jumptable + '3'] := number
    m[r0][jumptable + '4'] := number
    m[r0][jumptable + '5'] := number
    m[r0][jumptable + '6'] := number
    m[r0][jumptable + '7'] := number
    m[r0][jumptable + '8'] := number
    m[r0][jumptable + '9'] := number
.section text
    number:
        output 'q'
        push r1 on stack r2 #return address
        push r4 on stack r2 #nonvolatiles
        push r5 on stack r2 
        goto waiting

#################################################################
# space function
#################################################################
.section init 
    m[r0][jumptable + ' '] := space
.section text
    space: 
        output "space\n"
        goto waiting #waiting again

#################################################################
# newline function
#################################################################
.section init 
    m[r0][jumptable + '\n'] := newline
.section text
    newline:
        output "new line\n"
        goto printd


.section text
    waiting:
        output "waiting\n"
        push r1 on stack r2
        r4 := input() #12 2 +\n
        output r4
        r5 := jumptable + r4
        r5 := m[r0][r5]
        goto r5 #linking r1

        # while (stack is not empty)
        #     need to get last character for r4 on stack
        #     push r4 / 10 on stack r3

        # push r1 on stack r2 
        # r4 := input() 		#user input
        # output r4
        # r5 := r4 - 48
        # push r5 on stack r3
        # r5 := jumptable + r4
        # r5 := m[r0][r5]
        # goto r5
    input_error:
        output 'q'
        halt

    main:
        output "main\n"
    	r0 := 0
        #pop r1 off stack r2
        push r1 on stack r2
        goto waiting linking r1

        # r5 := 0				#counter
        # push r5 on stack r2
        # goto printd linking r1
        # pop r1 off stack r2
        # goto r1
        # halt
        pop r1 off stack r2
        goto r1