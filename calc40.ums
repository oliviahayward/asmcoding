.section init
    .temps r6, r7
    .zero r0
.section text
    r6 := input()

    #series of jumps dependent on what type of input

    if (number) goto number

    if (r6 == "\n") goto newline
    
    if (r6 == " ") goto space

    if (r6 == "+") goto add

    if (r6 == "-") goto sub

    if (r6 == "*") goto mult
    
    if (r6 == "/") goto div
    
    if (r6 == "|") goto or

    if (r6 == "&") goto and

    if (r6 == "c") goto changesign

    if (r6 == "~") goto neg

    if (r6 == "s") goto swap

    if (r6 == "d") goto dup

    if (r6 == "p") goto pop

    if (r6 == "z") goto zerostack

    

    number:
        push r6 on stack r2
    newline:
        printd r2 #case multiple things on stack
    space:
        #goto input line
    add:
        pop r7 off stack r2
        pop r6 off stack r2
        r6 := r6 + r7
        push r6 on stack r2
    sub:
        pop r7 off stack r2
        pop r6 off stack r2
        loadval rt,0
        nand rt,rt,rt
        r6 := r6 * rt
        r6 := r7 + r6
        push r6 on stack r2
    mul:
        pop r7 off stack r2
        pop r6 off stack r2
        r6 := r6 * r7
        push r6 on stack r2
    div:
        pop r7 off stack r2
        pop r6 off stack r2
        r6 := r6 / r7
        push r6 on stack r2
    or:
        pop r7 off stack r2
        pop r6 off stack r2
        #nand macro?
        push r6 on stack r2
    and:
        pop r7 off stack r2
        pop r6 off stack r2
        #and macro?
        push r6 on stack r2
    changesign:
        pop r6 off stack r2
        r6 =: ~r6
        r6 =: r6 + 1
        push r6 on stack r2
    neg:
        pop r6 off stack r2
        r6 =: ~r6
        push r6 on stack r2
    swap:
        pop r6 off stack r2
        pop r7 off stack r2
        push r6 on stack r2
        push r7 on stack r2
    dup:
        pop r6 off stack r2
        r7 := r6
        push r6 on stack r2
        push r7 on stack r2
    pop:
        pop stack r2
    zerostack:
        pop r6 off stack r2
        if (r2 != 0) goto zerostack

